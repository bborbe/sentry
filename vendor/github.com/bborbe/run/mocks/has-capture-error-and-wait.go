// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/bborbe/run"
	raven "github.com/getsentry/raven-go"
)

type HasCaptureErrorAndWait struct {
	CaptureErrorAndWaitStub        func(error, map[string]string, ...raven.Interface) string
	captureErrorAndWaitMutex       sync.RWMutex
	captureErrorAndWaitArgsForCall []struct {
		arg1 error
		arg2 map[string]string
		arg3 []raven.Interface
	}
	captureErrorAndWaitReturns struct {
		result1 string
	}
	captureErrorAndWaitReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *HasCaptureErrorAndWait) CaptureErrorAndWait(arg1 error, arg2 map[string]string, arg3 ...raven.Interface) string {
	fake.captureErrorAndWaitMutex.Lock()
	ret, specificReturn := fake.captureErrorAndWaitReturnsOnCall[len(fake.captureErrorAndWaitArgsForCall)]
	fake.captureErrorAndWaitArgsForCall = append(fake.captureErrorAndWaitArgsForCall, struct {
		arg1 error
		arg2 map[string]string
		arg3 []raven.Interface
	}{arg1, arg2, arg3})
	stub := fake.CaptureErrorAndWaitStub
	fakeReturns := fake.captureErrorAndWaitReturns
	fake.recordInvocation("CaptureErrorAndWait", []interface{}{arg1, arg2, arg3})
	fake.captureErrorAndWaitMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *HasCaptureErrorAndWait) CaptureErrorAndWaitCallCount() int {
	fake.captureErrorAndWaitMutex.RLock()
	defer fake.captureErrorAndWaitMutex.RUnlock()
	return len(fake.captureErrorAndWaitArgsForCall)
}

func (fake *HasCaptureErrorAndWait) CaptureErrorAndWaitCalls(stub func(error, map[string]string, ...raven.Interface) string) {
	fake.captureErrorAndWaitMutex.Lock()
	defer fake.captureErrorAndWaitMutex.Unlock()
	fake.CaptureErrorAndWaitStub = stub
}

func (fake *HasCaptureErrorAndWait) CaptureErrorAndWaitArgsForCall(i int) (error, map[string]string, []raven.Interface) {
	fake.captureErrorAndWaitMutex.RLock()
	defer fake.captureErrorAndWaitMutex.RUnlock()
	argsForCall := fake.captureErrorAndWaitArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *HasCaptureErrorAndWait) CaptureErrorAndWaitReturns(result1 string) {
	fake.captureErrorAndWaitMutex.Lock()
	defer fake.captureErrorAndWaitMutex.Unlock()
	fake.CaptureErrorAndWaitStub = nil
	fake.captureErrorAndWaitReturns = struct {
		result1 string
	}{result1}
}

func (fake *HasCaptureErrorAndWait) CaptureErrorAndWaitReturnsOnCall(i int, result1 string) {
	fake.captureErrorAndWaitMutex.Lock()
	defer fake.captureErrorAndWaitMutex.Unlock()
	fake.CaptureErrorAndWaitStub = nil
	if fake.captureErrorAndWaitReturnsOnCall == nil {
		fake.captureErrorAndWaitReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.captureErrorAndWaitReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *HasCaptureErrorAndWait) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.captureErrorAndWaitMutex.RLock()
	defer fake.captureErrorAndWaitMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *HasCaptureErrorAndWait) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ run.HasCaptureErrorAndWait = new(HasCaptureErrorAndWait)
