// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/bborbe/sentry"
	sentrya "github.com/getsentry/sentry-go"
)

type SentryClient struct {
	CaptureExceptionStub        func(error, *sentrya.EventHint, sentrya.EventModifier) *sentrya.EventID
	captureExceptionMutex       sync.RWMutex
	captureExceptionArgsForCall []struct {
		arg1 error
		arg2 *sentrya.EventHint
		arg3 sentrya.EventModifier
	}
	captureExceptionReturns struct {
		result1 *sentrya.EventID
	}
	captureExceptionReturnsOnCall map[int]struct {
		result1 *sentrya.EventID
	}
	CaptureMessageStub        func(string, *sentrya.EventHint, sentrya.EventModifier) *sentrya.EventID
	captureMessageMutex       sync.RWMutex
	captureMessageArgsForCall []struct {
		arg1 string
		arg2 *sentrya.EventHint
		arg3 sentrya.EventModifier
	}
	captureMessageReturns struct {
		result1 *sentrya.EventID
	}
	captureMessageReturnsOnCall map[int]struct {
		result1 *sentrya.EventID
	}
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	closeReturns struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *SentryClient) CaptureException(arg1 error, arg2 *sentrya.EventHint, arg3 sentrya.EventModifier) *sentrya.EventID {
	fake.captureExceptionMutex.Lock()
	ret, specificReturn := fake.captureExceptionReturnsOnCall[len(fake.captureExceptionArgsForCall)]
	fake.captureExceptionArgsForCall = append(fake.captureExceptionArgsForCall, struct {
		arg1 error
		arg2 *sentrya.EventHint
		arg3 sentrya.EventModifier
	}{arg1, arg2, arg3})
	stub := fake.CaptureExceptionStub
	fakeReturns := fake.captureExceptionReturns
	fake.recordInvocation("CaptureException", []interface{}{arg1, arg2, arg3})
	fake.captureExceptionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *SentryClient) CaptureExceptionCallCount() int {
	fake.captureExceptionMutex.RLock()
	defer fake.captureExceptionMutex.RUnlock()
	return len(fake.captureExceptionArgsForCall)
}

func (fake *SentryClient) CaptureExceptionCalls(stub func(error, *sentrya.EventHint, sentrya.EventModifier) *sentrya.EventID) {
	fake.captureExceptionMutex.Lock()
	defer fake.captureExceptionMutex.Unlock()
	fake.CaptureExceptionStub = stub
}

func (fake *SentryClient) CaptureExceptionArgsForCall(i int) (error, *sentrya.EventHint, sentrya.EventModifier) {
	fake.captureExceptionMutex.RLock()
	defer fake.captureExceptionMutex.RUnlock()
	argsForCall := fake.captureExceptionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *SentryClient) CaptureExceptionReturns(result1 *sentrya.EventID) {
	fake.captureExceptionMutex.Lock()
	defer fake.captureExceptionMutex.Unlock()
	fake.CaptureExceptionStub = nil
	fake.captureExceptionReturns = struct {
		result1 *sentrya.EventID
	}{result1}
}

func (fake *SentryClient) CaptureExceptionReturnsOnCall(i int, result1 *sentrya.EventID) {
	fake.captureExceptionMutex.Lock()
	defer fake.captureExceptionMutex.Unlock()
	fake.CaptureExceptionStub = nil
	if fake.captureExceptionReturnsOnCall == nil {
		fake.captureExceptionReturnsOnCall = make(map[int]struct {
			result1 *sentrya.EventID
		})
	}
	fake.captureExceptionReturnsOnCall[i] = struct {
		result1 *sentrya.EventID
	}{result1}
}

func (fake *SentryClient) CaptureMessage(arg1 string, arg2 *sentrya.EventHint, arg3 sentrya.EventModifier) *sentrya.EventID {
	fake.captureMessageMutex.Lock()
	ret, specificReturn := fake.captureMessageReturnsOnCall[len(fake.captureMessageArgsForCall)]
	fake.captureMessageArgsForCall = append(fake.captureMessageArgsForCall, struct {
		arg1 string
		arg2 *sentrya.EventHint
		arg3 sentrya.EventModifier
	}{arg1, arg2, arg3})
	stub := fake.CaptureMessageStub
	fakeReturns := fake.captureMessageReturns
	fake.recordInvocation("CaptureMessage", []interface{}{arg1, arg2, arg3})
	fake.captureMessageMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *SentryClient) CaptureMessageCallCount() int {
	fake.captureMessageMutex.RLock()
	defer fake.captureMessageMutex.RUnlock()
	return len(fake.captureMessageArgsForCall)
}

func (fake *SentryClient) CaptureMessageCalls(stub func(string, *sentrya.EventHint, sentrya.EventModifier) *sentrya.EventID) {
	fake.captureMessageMutex.Lock()
	defer fake.captureMessageMutex.Unlock()
	fake.CaptureMessageStub = stub
}

func (fake *SentryClient) CaptureMessageArgsForCall(i int) (string, *sentrya.EventHint, sentrya.EventModifier) {
	fake.captureMessageMutex.RLock()
	defer fake.captureMessageMutex.RUnlock()
	argsForCall := fake.captureMessageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *SentryClient) CaptureMessageReturns(result1 *sentrya.EventID) {
	fake.captureMessageMutex.Lock()
	defer fake.captureMessageMutex.Unlock()
	fake.CaptureMessageStub = nil
	fake.captureMessageReturns = struct {
		result1 *sentrya.EventID
	}{result1}
}

func (fake *SentryClient) CaptureMessageReturnsOnCall(i int, result1 *sentrya.EventID) {
	fake.captureMessageMutex.Lock()
	defer fake.captureMessageMutex.Unlock()
	fake.CaptureMessageStub = nil
	if fake.captureMessageReturnsOnCall == nil {
		fake.captureMessageReturnsOnCall = make(map[int]struct {
			result1 *sentrya.EventID
		})
	}
	fake.captureMessageReturnsOnCall[i] = struct {
		result1 *sentrya.EventID
	}{result1}
}

func (fake *SentryClient) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	stub := fake.CloseStub
	fakeReturns := fake.closeReturns
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *SentryClient) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *SentryClient) CloseCalls(stub func() error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *SentryClient) CloseReturns(result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *SentryClient) CloseReturnsOnCall(i int, result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *SentryClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.captureExceptionMutex.RLock()
	defer fake.captureExceptionMutex.RUnlock()
	fake.captureMessageMutex.RLock()
	defer fake.captureMessageMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *SentryClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ sentry.Client = new(SentryClient)
